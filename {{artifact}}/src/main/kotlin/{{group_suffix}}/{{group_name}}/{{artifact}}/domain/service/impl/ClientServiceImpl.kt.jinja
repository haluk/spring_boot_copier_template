package {{group_suffix}}.{{group_name}}.{{artifact}}.domain.service.impl

import {{group_suffix}}.{{group_name}}.{{artifact}}.domain.dto.ClientDto
import {{group_suffix}}.{{group_name}}.{{artifact}}.domain.mapper.ClientMapper
import {{group_suffix}}.{{group_name}}.{{artifact}}.domain.repository.ClientRepository
import {{group_suffix}}.{{group_name}}.{{artifact}}.domain.service.ClientService
import {{group_suffix}}.{{group_name}}.{{artifact}}.exception.EntityNotFoundException
import org.springframework.data.domain.Page
import org.springframework.data.domain.Pageable
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional

@Service
@Transactional
class ClientServiceImpl(
    private val repository: ClientRepository,
    private val mapper: ClientMapper
) : ClientService {

    override fun create(dto: ClientDto): ClientDto {
        val entity = mapper.toEntity(dto)
        return mapper.toDto(repository.save(entity))
    }

    override fun findById(id: Long): ClientDto {
        val entity = repository.findById(id).orElseThrow { EntityNotFoundException("Client", id) }
        return mapper.toDto(entity)
    }

    override fun update(id: Long, dto: ClientDto): ClientDto {
        val entity = repository.findById(id).orElseThrow { EntityNotFoundException("Client", id) }
        mapper.partialUpdate(dto, entity)
        return mapper.toDto(repository.save(entity))
    }

    override fun findAll(pageable: Pageable): Page<ClientDto> {
        return repository.findAll(pageable).map(mapper::toDto)
    }
}
