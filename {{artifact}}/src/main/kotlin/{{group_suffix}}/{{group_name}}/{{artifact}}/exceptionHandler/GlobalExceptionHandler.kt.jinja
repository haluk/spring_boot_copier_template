package {{group_suffix}}.{{group_name}}.{{artifact}}.exceptionHandler

import {{group_suffix}}.{{group_name}}.{{artifact}}.config.RequestIdFilter
import {{group_suffix}}.{{group_name}}.{{artifact}}.domain.dto.response.ErrorResponse
import {{group_suffix}}.{{group_name}}.{{artifact}}.exception.EntityNotFoundException
import jakarta.servlet.http.HttpServletRequest
import org.slf4j.MDC
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.MethodArgumentNotValidException
import org.springframework.web.bind.annotation.ExceptionHandler
import org.springframework.web.bind.annotation.RestControllerAdvice

@RestControllerAdvice
class GlobalExceptionHandler {

    @ExceptionHandler(EntityNotFoundException::class)
    fun handleEntityNotFound(
        ex: EntityNotFoundException,
        request: HttpServletRequest
    ): ResponseEntity<ErrorResponse> {
        val response = ErrorResponse(
            status = HttpStatus.NOT_FOUND.value(),
            error = HttpStatus.NOT_FOUND.reasonPhrase,
            message = ex.message ?: "Entity not found",
            path = request.requestURI,
            requestId = MDC.get(RequestIdFilter.REQUEST_ID_HEADER),  // Capture request ID
            validationErrors = null  // No validation errors for this exception type
        )
        return ResponseEntity(response, HttpStatus.NOT_FOUND)
    }

    @ExceptionHandler(MethodArgumentNotValidException::class)
    fun handleValidationException(
        ex: MethodArgumentNotValidException,
        request: HttpServletRequest
    ): ResponseEntity<ErrorResponse> {
        val errors = ex.bindingResult.fieldErrors.associate {
            it.field to (it.defaultMessage ?: "Invalid")
        }
        val response = ErrorResponse(
            status = HttpStatus.BAD_REQUEST.value(),
            error = HttpStatus.BAD_REQUEST.reasonPhrase,
            message = "Validation failed",
            path = request.requestURI,
            requestId = MDC.get(RequestIdFilter.REQUEST_ID_HEADER),
            validationErrors = errors
        )
        return ResponseEntity(response, HttpStatus.BAD_REQUEST)
    }
}
