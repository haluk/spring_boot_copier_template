package {{group_suffix}}.{{group_name}}.{{artifact}}.controller.rest

import {{group_suffix}}.{{group_name}}.{{artifact}}.domain.dto.response.PaginatedResponse
import {{group_suffix}}.{{group_name}}.{{artifact}}.domain.service.CrudService
import {{group_suffix}}.{{group_name}}.{{artifact}}.util.PaginationUtils
import jakarta.servlet.http.HttpServletRequest
import org.springframework.data.domain.Pageable
import org.springframework.http.HttpStatus
import org.springframework.web.bind.annotation.*

abstract class CrudController<E : Any, D, ID>(
) {
    protected abstract val service: CrudService<E, D, ID>

    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    fun create(@RequestBody dto: D): D =
        service.create(dto)

    @GetMapping("/{id}")
    fun findById(@PathVariable id: ID): D =
        service.findById(id)

    @PutMapping("/{id}")
    fun update(@PathVariable id: ID, @RequestBody dto: D): D =
        service.update(id, dto)

    @GetMapping
    fun findAll(
        @RequestParam(defaultValue = "0") page: Int,
        @RequestParam(defaultValue = "100") size: Int,
        pageable: Pageable,
        request: HttpServletRequest
    ): PaginatedResponse<D> {
        return PaginationUtils.buildResponse(service.findAll(pageable), request)
    }
}
